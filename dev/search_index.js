var documenterSearchIndex = {"docs":
[{"location":"features/interfaces/#Quantum-Chemical-Interfaces","page":"Interfaces","title":"Quantum-Chemical Interfaces","text":"","category":"section"},{"location":"getting-started/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"MOLGA can be installed using Julia's package manager. From the the Julia REPL, type ] to start the package manager mode and run","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"pkg> update\npkg> add MOLGA","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"This package is an interplay between our genetic algorithm and third-party quantum-chemical calculations. As described here, MOLGA currently supports Gaussian and XTB.","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"info: Info\nIf the installation paths on your system differ from the defaults, you'll need to set up environment variables. This ensures MOLGA can locate the required executable files.You can specify these paths in an environment variable file (located in the same directory where you run MOLGA). Ensure you define the path(s) for the program(s) you intend to use, as specified in the parameter file.# .env file (showing defaults)\nGAUSSIAN=g16\nXTB=xtb","category":"page"},{"location":"getting-started/tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"parameters/input-file/#Input-File","page":"Input File","title":"Input File","text":"","category":"section"},{"location":"parameters/input-file/","page":"Input File","title":"Input File","text":"Lorem ipsum","category":"page"},{"location":"features/overview/#Features","page":"Overview","title":"Features","text":"","category":"section"},{"location":"parameters/struct/#config-struct","page":"config struct","title":"config struct","text":"","category":"section"},{"location":"parameters/struct/","page":"config struct","title":"config struct","text":"This is the object holding a complete collection of all parsed configuration parameters and their defaults, if not specified.","category":"page"},{"location":"parameters/struct/","page":"config struct","title":"config struct","text":"MOLGA.Configuration.ConfigurationObject\nMOLGA.Configuration.InitialPopulationConfiguration","category":"page"},{"location":"parameters/struct/#MOLGA.Configuration.ConfigurationObject-parameters-struct","page":"config struct","title":"MOLGA.Configuration.ConfigurationObject","text":"Stores the entire configuration parameters.\n\ninitial_population: See InitialPopulationConfiguration.\ncharge: Charge of the structure.\nspin_multiplicity: Spin multiplicity of the structure.\ndistance_thresholds: See DistanceThresholds.\n\n\n\n\n\n","category":"type"},{"location":"parameters/struct/#MOLGA.Configuration.InitialPopulationConfiguration-parameters-struct","page":"config struct","title":"MOLGA.Configuration.InitialPopulationConfiguration","text":"Defines the configuration of the initial population.\n\nnum_structures::Int64: The number of initial structures to be created.\nbox_size::StaticArraysCore.SVector{3, Float64}: The three dimensions of the periodic boundary condition box (in angstroms).\natom_config::Array{Union{MOLGA.Configuration.ConfigAtom, MOLGA.Configuration.ConfigMolecule}}: See AtomConfig.\n\n\n\n\n\n","category":"type"},{"location":"features/structure-clustering/#Structure-Clustering","page":"Structure Clustering","title":"Structure Clustering","text":"","category":"section"},{"location":"features/genetic-algorithm/#Genetic-Algorithm","page":"Genetic Algorithm","title":"Genetic Algorithm","text":"","category":"section"},{"location":"features/genetic-algorithm/#Initial-Population","page":"Genetic Algorithm","title":"Initial Population","text":"","category":"section"},{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"This page provides a list of all documented functions, structs and modules in the MolecularGeneticAlgorithm. Note that this is list is auto-generated using Documenter's @autodocs function.","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Order = [:function, :type, :constant]","category":"page"},{"location":"reference/#Main-Module","page":"API Reference","title":"Main Module","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA]","category":"page"},{"location":"reference/#MOLGA.run","page":"API Reference","title":"MOLGA.run","text":"run(configuration_file [, debug_log::Bool = false])\n\nStart the Molecular Genetic Algorithm.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Genetic-Algorithm","page":"API Reference","title":"Genetic Algorithm","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA.GeneticAlgorithm.InitialPopulation,MOLGA.GeneticAlgorithm.Optimization,MOLGA.GeneticAlgorithm.Utils]","category":"page"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.create-Tuple{MOLGA.Configuration.ConfigurationObject}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.create","text":"create(config [; rng])\n\nInitialize the population by creating the desired amount of random structures using the InitialPopulationConfiguration.\n\nArguments\n\nconfig::ConfigurationObject\nrng::AbstractRNG: Random number generator. If you need consistent results for testing purposes, pass a seeded pseudorandom number generator here, eg. Xoshiro(seed). Defaults to Random.default_rng().\n\nReturns\n\nA vector of structures.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.find_position!-Tuple{MOLGA.Configuration.ConfigAtom, Vector{MOLGA.Types.Atom}, Int64, Int64, StaticArraysCore.SVector{3, Float64}, MOLGA.Configuration.DistanceThresholds, Int64}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.find_position!","text":"find_position!(atom, atom_list, permanent_index, fragment_kind box_size, distance_thresholds,\n    max_attempts, [; rng])\n\nTry to find a position for an atom within the periodic boundary condition box by respecting distance thresholds. If a proper position is found, the list of atoms is updated in-place by adding the specified atom with its permanent_index and fragment_kind to the atom_list.\n\nArguments\n\natom::ConfigAtom: The atom to be placed into the structure.\natom_list::Vector{Atom}: The list of atoms of the structure.\npermanent_index::Int\nfragment_kind::Int\nbox_size::Vec\ndistance_thresholds::DistanceThresholds\nmax_attempts::Int: Maximum number of attempts to find a proper random position.\nrng::AbstractRNG: Random number generator. If you need consistent results for testing purposes, pass a seeded pseudorandom number generator here, eg. Xoshiro(seed). Defaults to Random.default_rng().\n\nReturns\n\ntrue if the atom could be placed,\nfalse if no suitable position could be found within the maximum number of attempts.\n\nExample\n\njulia> atom_list = [\n           Atom(8, [-0.299181461, 0.000000000, -0.473896792], 1, 1),\n           Atom(1, [-0.299181461, 0.759337000, 0.122146208], 1, 1),\n           Atom(1, [-0.299181461, -0.759337000, 0.122146208], 1, 1),\n       ];\n\njulia> find_position!(\n           ConfigAtom(1, 1),\n           atom_list,\n           2,\n           2,\n           Vec([8, 8, 8]),\n           DistanceThresholds(1, 5),\n           5_000;\n           rng=Xoshiro(123),\n       )\ntrue\n\njulia> atom_list\n4-element Vector{Atom}:\n O     1    1 [-0.299181461         0.0                  -0.473896792        ]\n\n H     1    1 [-0.299181461         0.759337             0.122146208         ]\n\n H     1    1 [-0.299181461         -0.759337            0.122146208         ]\n\n H     2    2 [0.1697103642830644   0.6944540596267874   3.1270295847422487  ]\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.find_position!-Tuple{MOLGA.Configuration.ConfigMolecule, Vector{MOLGA.Types.Atom}, Int64, Int64, StaticArraysCore.SVector{3, Float64}, MOLGA.Configuration.DistanceThresholds, Int64}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.find_position!","text":"find_position!(fragment, atom_list, permanent_index, fragment_kind, box_size,\n    distance_thresholds, max_attempts [; rng])\n\nPlace a fragment (ConfigMolecule) into the periodic boundary condition box. Perform distance checks for all atoms of the fragment and assign the specified permanent index and fragment kind to all atoms. This method upates the atom_list in-place.\n\nSee find_position!(atom, ...) for more details.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.generate_atoms-Tuple{Matrix{Int64}, MOLGA.Configuration.InitialPopulationConfiguration, MOLGA.Configuration.DistanceThresholds, Int64}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.generate_atoms","text":"generate_atoms(indices, population_config, distance_thresholds, max_iterations [; rng])\n\nDistribute the atoms and fragments randomly within a cuboid periodic boundary condition box with respect to the distance thresholds.\n\nArguments\n\nindices::Matrix{Int}: A two-dimensional matrix generated by generate_indices representing the atom configuration.\npopulation_config::InitialPopulationConfiguration\ndistance_thresholds::DistanceThresholds\nmax_iterations::Int: The maximum number of iterations to find proper positions while distributing the atoms and fragments.\nrng::AbstractRNG: Random number generator. If you need consistent results for testing purposes, pass a seeded pseudorandom number generator here, eg. Xoshiro(seed). Defaults to Random.default_rng().\n\nReturns\n\nA vector of atoms.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.generate_indices-Tuple{Array{Union{MOLGA.Configuration.ConfigAtom, MOLGA.Configuration.ConfigMolecule}}}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.generate_indices","text":"generate_indices(atom_config)\n\nCreate a list of the indices using the AtomConfig.\n\nThe resulting two-dimensional matrix contains the fragment_kind in the first column and the permanent_index in the second column. Both indices are integers starting from 1. The entries are inserted as often as specified in the AtomConfig quantity-property.\n\nEach fragment or single atom (one or more) have their own fragment_kind which is equivalent to the index of the AtomConfig list. To provide an option to preserve fragments, all atoms of an instance of a fragment have a common permanent_index.\n\nExample\n\nSmall example distributing two hydrogen atoms, one oxygen atom, as well as two carbon dioxide fragments for demonstration purposes.\n\natom_config::AtomConfig = [\n    ConfigAtom(2, 1), # 2x H\n    ConfigAtom(1, 8), # 1x O\n    ConfigMolecule(\n        2, # 2x CO2\n        [\n            BaseAtom(6, [-1.161937300 0.000000000 -1.704638554]),\n            BaseAtom(8, [-0.610097929 -0.126832008 -0.681728275]),\n            BaseAtom(8, [-1.713776672 0.126832008 -2.727548833]),\n        ],\n    ),\n]\ngenerate_indices(atom_config)\n\n# output\n\n5×2 Matrix{Int64}:\n 1  1\n 1  2\n 2  3\n 3  4\n 3  5\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.random_angles-Tuple{}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.random_angles","text":"random_angles([; rng])\n\nGenerate a vector of three random angles (from 0 to 2pi, in radians).\n\nExample\n\njulia> random_angles(; rng=Xoshiro(123))\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n 3.2748828620072237\n 3.687015596584574\n 5.597555946335841\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.random_position-Tuple{StaticArraysCore.SVector{3, Float64}}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.random_position","text":"random_position(box_size [; rng])\n\nGenerate a random position within the specified box. The origin is the box's center point, so that a box size of mathbfs=left(s_xs_ys_zright) leads to a random position mathbfx\n\n-frac12mathbfsleqmathbfxleqfrac12mathbfs text\n\nExample\n\njulia> random_position(Vec([8, 5, 5]); rng=Xoshiro(1))\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n -3.413069164245657\n -0.7537925522140694\n  0.9941334184573423\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.rotate_position-Tuple{StaticArraysCore.SVector{3, Float64}, StaticArraysCore.SVector{3, Float64}}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.rotate_position","text":"rotate_position(position, angle)\n\nRotate a 3D position vector by a 3D angle vector around the origin using rotation matrices.\n\nArguments\n\nposition::Vector{Float64}: The 3D position vector to be rotated.\nangle::Vector{Float64}: The 3D angle vector representing rotation angles around the x, y, and z axes in radians.\n\nExample\n\njulia> rotate_position(Vec([1, 0, 0.5]), Vec([0, 0, π]))\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n -1.0\n  1.2246467991473532e-16\n  0.5\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.InitialPopulation.shuffle_rows!-Tuple{AbstractMatrix}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.InitialPopulation.shuffle_rows!","text":"shuffle_rows!(m::AbstractMatrix [; rng])\n\nRandomly reorder the rows of the given matrix in-place. You can pass a random number generator to rng like described here.\n\nExample\n\njulia> mat = [1 10; 2 20; 3 30; 4 40; 5 50];\n\njulia> shuffle_rows!(mat; rng=Xoshiro(123));\n\njulia> mat\n5×2 Matrix{Int64}:\n 5  50\n 4  40\n 2  20\n 3  30\n 1  10\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.GeneticAlgorithm.Utils.check_distance-Tuple{StaticArraysCore.SVector{3, Float64}, Vector{<:MOLGA.Types.AbstractAtom}, MOLGA.Configuration.DistanceThresholds}","page":"API Reference","title":"MOLGA.GeneticAlgorithm.Utils.check_distance","text":"check_distance(new_position, atoms, thresholds)\n\nChecks if the new position is sufficiently far away from all existing atoms in the atom list.\n\nArguments\n\nnew_position::Vec: The new position to be checked.\natoms::Vector{<:AbstractAtom}: The current list of atoms.\nthresholds::DistanceThresholds\n\nExample\n\nThe atom list contains the atoms of a water molecule. The task is to check if the chosen position is suitable. The distances between the new position and the hydrogen atoms are 1.80392 and 1.30274; the distance between pos and the carbon atom is 1.40762 (all measured with Chemcraft).\n\njulia> pos = Vec([0.959329065, 0.512611795, -0.106788996]);\n\njulia> check_distance(pos, Atom[], DistanceThresholds(0.5, 5.0))\ntrue\n\njulia> atoms = [\n           BaseAtom(8, [-0.299181461, 0.000000000, -0.473896792]),\n           BaseAtom(1, [-0.299181461, 0.759337000, 0.122146208]),\n           BaseAtom(1, [-0.299181461, -0.759337000, 0.122146208]),\n       ];\n\njulia> check_distance(pos, atoms, DistanceThresholds(0.5, 5.0))\ntrue\n\njulia> check_distance(pos, atoms, DistanceThresholds(1.4, 5.0))\nfalse\n\njulia> check_distance(pos, atoms, DistanceThresholds(0.5, 1))\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#Interfaces","page":"API Reference","title":"Interfaces","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA.Interfaces]","category":"page"},{"location":"reference/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA.Types]","category":"page"},{"location":"reference/#MOLGA.Types.AbstractAtom","page":"API Reference","title":"MOLGA.Types.AbstractAtom","text":"Abstract type for Atom and BaseAtom.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Types.Atom","page":"API Reference","title":"MOLGA.Types.Atom","text":"Atom(element, position, permanent_index, fragment_kind)\n\nStores properties of a single atom.\n\nelement::Int64: Atomic number of the element, eg. 6 for Carbon.\nposition::StaticArraysCore.SVector{3, Float64}: 3D position vector of the atom in angstroms.\npermanent_index::Int64: Unique index attached to an atom.\nfragment_kind::Int64: Kind of fragment this atom belongs to, e.g. all atoms that belong to a H2O molecule have the same value here, also all single O atoms have the same value here, respectively.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Types.BaseAtom","page":"API Reference","title":"MOLGA.Types.BaseAtom","text":"BaseAtom(element, position)\n\nStores a basic atom.\n\nelement::Int64: Atomic number of the element, eg. 6 for Carbon.\nposition::StaticArraysCore.SVector{3, Float64}: 3D position vector of the atom in angstroms.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Types.Structure","page":"API Reference","title":"MOLGA.Types.Structure","text":"Structure(atoms)\nStructure(atoms [, energy [, nuclear_repulsion_energy [, age]]])\n\nStores properties of a molecular structure.\n\natoms::Vector{MOLGA.Types.Atom}: Array of atoms that the structure consists of.\nenergy::Float64: Energy of the structure in eV.\nnuclear_repulsion_energy::Float64: Nuclear repulsion energy of the structure in eV.\nage::Int64: Number of cycles that this structure is already present.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Types.Vec","page":"API Reference","title":"MOLGA.Types.Vec","text":"Three-dimensional vector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Configuration","page":"API Reference","title":"Configuration","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA.Configuration]","category":"page"},{"location":"reference/#MOLGA.Configuration.AtomConfig","page":"API Reference","title":"MOLGA.Configuration.AtomConfig","text":"The atom configuration consists of single atoms and molecules.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Configuration.ConfigAtom","page":"API Reference","title":"MOLGA.Configuration.ConfigAtom","text":"ConfigAtom(num, element)\n\nAtom to define initial atom configuration.\n\nquantity::Int64: Number of atoms of this kind.\nelement::Int64: Chemical element denoted as atomic number.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Configuration.ConfigMolecule","page":"API Reference","title":"MOLGA.Configuration.ConfigMolecule","text":"ConfigMolecule(num, atoms)\n\nMolecule to define initial atom configuration.\n\nquantity::Int64: Number of molecules of this kind.\natoms::Vector{MOLGA.Types.BaseAtom}: Array of atoms that the molecule consists of.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Configuration.ConfigurationObject","page":"API Reference","title":"MOLGA.Configuration.ConfigurationObject","text":"Stores the entire configuration parameters.\n\ninitial_population: See InitialPopulationConfiguration.\ncharge: Charge of the structure.\nspin_multiplicity: Spin multiplicity of the structure.\ndistance_thresholds: See DistanceThresholds.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Configuration.DistanceThresholds","page":"API Reference","title":"MOLGA.Configuration.DistanceThresholds","text":"DistanceThresholds(min, max)\n\nDefines the thresholds for distances between atoms.\n\nmin::Float64: Minimum distance that two atoms need.\nmax::Float64: Maximum distance that two atoms need.\n\nThe values are taken into account at several points, including in the generation of the initial  population and in mutation and recombination. They are given in angstroms.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Configuration.InitialPopulationConfiguration","page":"API Reference","title":"MOLGA.Configuration.InitialPopulationConfiguration","text":"Defines the configuration of the initial population.\n\nnum_structures::Int64: The number of initial structures to be created.\nbox_size::StaticArraysCore.SVector{3, Float64}: The three dimensions of the periodic boundary condition box (in angstroms).\natom_config::Array{Union{MOLGA.Configuration.ConfigAtom, MOLGA.Configuration.ConfigMolecule}}: See AtomConfig.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MOLGA.Configuration.create_atom_config-Tuple{Dict{String, Int64}, Dict{String, Int64}, String}","page":"API Reference","title":"MOLGA.Configuration.create_atom_config","text":"create_atom_config(atoms::Dict{String,Int}, molecules::Dict{String,Int}, config_path::String)\n\nCreates AtomConfig from the TOML raw values (atoms, molecules). Elements are internally represented via their atomic number. The molecules are loaded and parsed from their xyz-files.\n\nThe config_path is the folder where the config file is stored. The molecule file paths are expected to be relative to this folder.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.Configuration.load_config-Tuple{String}","page":"API Reference","title":"MOLGA.Configuration.load_config","text":"load_config(configuration_file)\n\nLoads the configuration parameters from the specified TOML file.\n\n\n\n\n\n","category":"method"},{"location":"reference/#I/O","page":"API Reference","title":"I/O","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA.IO]","category":"page"},{"location":"reference/#MOLGA.IO.load_xyz-Tuple{String}","page":"API Reference","title":"MOLGA.IO.load_xyz","text":"load_xyz(xyz_file::String)\n\nGet all atoms from a structure in XYZ-format (with element symbols).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Helpers","page":"API Reference","title":"Helpers","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [MOLGA.Helpers]","category":"page"},{"location":"reference/#MOLGA.Helpers.atomic_number-Tuple{AbstractString}","page":"API Reference","title":"MOLGA.Helpers.atomic_number","text":"atomic_number(element_symbol)\n\nGet the atomic number of an element of the periodic table as Int.\n\nArguments\n\nelement_symbol::AbstractString: The case-sensitive element symbol.\n\nExample\n\njulia> atomic_number(\"Ar\")\n18\n\n\n\n\n\n","category":"method"},{"location":"reference/#MOLGA.Helpers.element_symbol-Tuple{Int64}","page":"API Reference","title":"MOLGA.Helpers.element_symbol","text":"element_symbol(atomic_number)\n\nGet the symbol of an element of the periodic table as String.\n\nArguments\n\natomic_number::Int\n\nExample\n\njulia> element_symbol(1)\n\"H\"\n\n\n\n\n\n","category":"method"},{"location":"#MOLGA.jl:-A-molecular-genetic-algorithm.","page":"Home","title":"MOLGA.jl: A molecular genetic algorithm.","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to search the chemical space for molecular structures using a genetic algorithm with XTB/Gaussian and integrated structure clustering.","category":"page"}]
}
